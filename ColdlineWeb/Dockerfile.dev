# ===== STAGE 1: build Blazor WASM =====
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /src

# Copia o csproj e restaura dependÃªncias
COPY ColdlineWeb.csproj .
RUN dotnet restore ColdlineWeb.csproj

# Copia todo o cÃ³digo fonte
COPY . .

# ðŸ”¥ Limpa build e cache antigo
RUN dotnet clean ColdlineWeb.csproj
RUN rm -rf /out

# ðŸ”¥ Publica o projeto SEM cache
RUN dotnet publish ColdlineWeb.csproj -c Release -o /out /p:UseAppHost=false --no-restore

# ===== STAGE 2: NGINX (porta 4080) =====
FROM nginx:alpine
RUN rm -f /etc/nginx/conf.d/default.conf

# Copia os arquivos publicados do Blazor
COPY --from=build /out/wwwroot /usr/share/nginx/html

# ðŸ”¥ ConfiguraÃ§Ã£o Nginx: desativa cache completamente
RUN printf "server {\n\
  listen 4080;\n\
  server_name _;\n\
  root /usr/share/nginx/html;\n\
  index index.html;\n\
  location / {\n\
    try_files \$uri \$uri/ /index.html;\n\
  }\n\
  # Desativa cache de todos os arquivos estÃ¡ticos\n\
  location ~* \\.(?:js|css|png|jpg|jpeg|gif|svg|ico|wasm|json|html|txt|xml|map)\$ {\n\
    expires -1;\n\
    add_header Cache-Control \"no-cache, no-store, must-revalidate\" always;\n\
    add_header Pragma \"no-cache\" always;\n\
    add_header Expires 0 always;\n\
    access_log off;\n\
  }\n\
}\n" > /etc/nginx/conf.d/blazor.conf

EXPOSE 4080
CMD ["nginx", "-g", "daemon off;"]
