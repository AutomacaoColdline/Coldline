@page "/pausetypes"
@inject HttpClient Http

<h3>Gerenciamento de Tipos de Pausa</h3>

@if (isLoading)
{
    <p>Carregando...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="OpenAddPauseTypeModal">Adicionar Tipo de Pausa</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Defeito</th>
                <th>Retrabalho</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pauseType in pauseTypes)
            {
                <tr>
                    <td>@pauseType.Name</td>
                    <td>@pauseType.Description</td>
                    <td>@pauseType.Defect.Name</td>
                    <td>@(pauseType.Rework == true ? "Sim" : "Não")</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => OpenEditPauseTypeModal(pauseType)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeletePauseType(pauseType.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Tipo de Pausa" : "Adicionar Tipo de Pausa")</h5>
                    <button class="close" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    <label>Nome:</label>
                    <input class="form-control" @bind="currentPauseType.Name" />

                    <label>Descrição:</label>
                    <input class="form-control" @bind="currentPauseType.Description" />

                    <label>Defeito:</label>
                    <select class="form-control" @bind="currentPauseType.Defect.Id">
                        @foreach (var defect in defects)
                        {
                            <option value="@defect.Id">@defect.Name</option>
                        }
                    </select>

                    <label>Retrabalho:</label>
                    <input type="checkbox" class="form-check-input" @bind="currentPauseType.Rework" />
                    <span class="ms-2">Marcar se requer retrabalho</span>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-success" @onclick="SavePauseType">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<PauseTypeModel> pauseTypes = new();
    private List<ReferenceEntity> defects = new();
    private PauseTypeModel currentPauseType = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            pauseTypes = await Http.GetFromJsonAsync<List<PauseTypeModel>>("api/PauseType") ?? new List<PauseTypeModel>();
            defects = await Http.GetFromJsonAsync<List<ReferenceEntity>>("api/Defect") ?? new List<ReferenceEntity>();
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar dados.";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenAddPauseTypeModal()
    {
        currentPauseType = new PauseTypeModel();
        showModal = true;
        isEditing = false;
    }

    private void OpenEditPauseTypeModal(PauseTypeModel pauseType)
    {
        currentPauseType = new PauseTypeModel
        {
            Id = pauseType.Id,
            Name = pauseType.Name,
            Description = pauseType.Description,
            Defect = new ReferenceEntity { Id = pauseType.Defect.Id, Name = pauseType.Defect.Name },
            Rework = pauseType.Rework
        };
        showModal = true;
        isEditing = true;
    }

    private async Task SavePauseType()
    {
        var selectedDefect = defects.FirstOrDefault(d => d.Id == currentPauseType.Defect.Id);
        if (selectedDefect != null)
        {
            currentPauseType.Defect.Name = selectedDefect.Name;
        }

        if (isEditing)
        {
            await Http.PutAsJsonAsync($"api/PauseType/{currentPauseType.Id}", currentPauseType);
        }
        else
        {
            await Http.PostAsJsonAsync("api/PauseType", currentPauseType);
        }
        showModal = false;
        await LoadData();
    }

    private async Task DeletePauseType(string id)
    {
        await Http.DeleteAsync($"api/PauseType/{id}");
        await LoadData();
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private class PauseTypeModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public ReferenceEntity Defect { get; set; } = new ReferenceEntity();
        public bool? Rework { get; set; }
    }

    private class ReferenceEntity
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
}
