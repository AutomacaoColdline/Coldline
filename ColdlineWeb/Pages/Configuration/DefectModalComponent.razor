@using ColdlineWeb.Models
@using ColdlineWeb.Services
@inject DefectService DefectService
@inject TypeDefectService TypeDefectService
@inject PartService PartService

@if (Visible)
{
    <div class="modal d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(IsEdit ? "Editar Defeito" : "Adicionar Defeito")</h5>
                </div>
                <div class="modal-body">
                    <label>Nome:</label>
                    <input class="form-control" @bind="Defect.Name" />

                    <label>Descrição:</label>
                    <input class="form-control" @bind="Defect.Description" />

                    <label>Tipo de Defeito:</label>
                    <select class="form-control" @bind="Defect.TypeDefect.Id">
                        @foreach (var type in TypeDefects)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    </select>

                    <label>Peça:</label>
                    <select class="form-control" @bind="Defect.Part.Id">
                        @foreach (var part in Parts)
                        {
                            <option value="@part.Id">@part.Name</option>
                        }
                    </select>

                    <label>Interno:</label>
                    <input type="checkbox" class="form-check-input" @bind="Defect.Internal" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                    <button class="btn btn-success" @onclick="Save">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public DefectModel Defect { get; set; } = new();
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public bool IsEdit { get; set; }

    private List<TypeDefectModel> TypeDefects = new();
    private List<PartModel> Parts = new();

    protected override async Task OnInitializedAsync()
    {
        TypeDefects = await TypeDefectService.GetAllAsync();
        Parts = await PartService.GetAllAsync();
    }

    private async Task Save()
    {
        var selectedType = TypeDefects.FirstOrDefault(t => t.Id == Defect.TypeDefect.Id);
        var selectedPart = Parts.FirstOrDefault(p => p.Id == Defect.Part.Id);

        if (selectedType != null) Defect.TypeDefect.Name = selectedType.Name;
        if (selectedPart != null) Defect.Part.Name = selectedPart.Name;

        if (IsEdit)
            await DefectService.UpdateAsync(Defect.Id, Defect);
        else
            await DefectService.CreateAsync(Defect);

        await OnSaved.InvokeAsync();
        await VisibleChanged.InvokeAsync(false);
    }

    private async Task Close()
    {
        await VisibleChanged.InvokeAsync(false);
    }
}
