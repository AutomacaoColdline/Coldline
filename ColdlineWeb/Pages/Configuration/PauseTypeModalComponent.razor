@using ColdlineWeb.Models
@using ColdlineWeb.Services
@inject PauseTypeService PauseTypeService
@inject TypeDefectService TypeDefectService

@if (Visible)
{
    <div class="modal d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(IsEdit ? "Editar Tipo de Pausa" : "Adicionar Tipo de Pausa")</h5>
                    <button class="close" @onclick="Close">&times;</button>
                </div>
                <div class="modal-body">
                    <label>Nome:</label>
                    <input class="form-control" @bind="PauseType.Name" />

                    <label>Descrição:</label>
                    <input class="form-control" @bind="PauseType.Description" />

                    <div class="form-check mt-3 mb-2">
                        <input class="form-check-input" type="checkbox" id="defectCheckbox" @bind="showDefectSelect" />
                        <label class="form-check-label" for="defectCheckbox">
                            Vincular Tipo de Defeito?
                        </label>
                    </div>

                    @if (showDefectSelect)
                    {
                        <div>
                            <label>Tipo de Defeito (Opcional):</label>
                            <select class="form-control" @bind="PauseType.Defect.Id">
                                <option value="">-- Selecione --</option>
                                @foreach (var defect in TypeDefects)
                                {
                                    <option value="@defect.Id">@defect.Name</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted mt-2">Peça quebrada?</p>
                        PauseType.Defect = new ReferenceEntity(); <!-- Limpa seleção -->
                    }

                    <div class="form-check mt-3">
                        <input type="checkbox" class="form-check-input" id="reworkCheck" @bind="PauseType.Rework" />
                        <label class="form-check-label" for="reworkCheck">Requer retrabalho</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                    <button class="btn btn-success" @onclick="Save">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public PauseTypeModel PauseType { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    private List<TypeDefectModel> TypeDefects = new();
    private bool showDefectSelect = false;

    protected override async Task OnInitializedAsync()
    {
        TypeDefects = await TypeDefectService.GetAllAsync();

        // Se já existir um ID de defeito vinculado, mostrar o select
        showDefectSelect = !string.IsNullOrEmpty(PauseType.Defect?.Id);
    }

    private async Task Save()
    {
        if (showDefectSelect)
        {
            var selected = TypeDefects.FirstOrDefault(x => x.Id == PauseType.Defect.Id);
            if (selected != null)
                PauseType.Defect.Name = selected.Name;
        }
        else
        {
            PauseType.Defect = new ReferenceEntity(); // limpa caso desmarcado
        }

        if (IsEdit)
            await PauseTypeService.UpdateAsync(PauseType.Id, PauseType);
        else
            await PauseTypeService.CreateAsync(PauseType);

        await OnSaved.InvokeAsync();
        await VisibleChanged.InvokeAsync(false);
    }

    private async Task Close()
    {
        await VisibleChanged.InvokeAsync(false);
    }
}
