@using ColdlineWeb.Models
@using ColdlineWeb.Services
@inject TypeDefectService TypeDefectService

@if (Visible)
{
    <div class="modal d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((IsEdit ? "Editar" : "Adicionar") + " Tipo de Defeito")</h5>
                </div>
                <div class="modal-body">
                    <label>Nome:</label>
                    <input class="form-control" @bind="TypeDefect.Name" />

                    <label>Descrição:</label>
                    <textarea class="form-control" @bind="TypeDefect.Description" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                    <button class="btn btn-success" @onclick="Save">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public TypeDefectModel TypeDefect { get; set; } = new();
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public bool IsEdit { get; set; }

    private async Task Save()
    {
        if (IsEdit)
            await TypeDefectService.UpdateAsync(TypeDefect.Id, TypeDefect);
        else
            await TypeDefectService.CreateAsync(TypeDefect);

        await OnSaved.InvokeAsync();
        await VisibleChanged.InvokeAsync(false);
    }

    private async Task Close()
    {
        await VisibleChanged.InvokeAsync(false);
    }
}
