@page "/industria"
@layout EmptyLayout
@inject HttpClient Http
@inject NavigationManager Navigation

<!-- Estilos da Página -->
<style>
    .sidebar {
        width: 250px;
        background-color: #f8f9fa;
        height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 20px;
        box-shadow: 2px 0px 5px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .user-avatar img {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
    }

    .user-info {
        text-align: center;
        margin-top: 10px;
    }

    .user-details {
        margin-top: 15px;
        font-size: 14px;
        text-align: center;
        color: #333;
    }

    .btn-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        background-color: #007bff;
        color: white;
        font-size: 18px;
        cursor: pointer;
        position: absolute;
        bottom: 20px;
    }

    .btn-circle:hover {
        background-color: #0056b3;
    }

    .main-content {
        flex-grow: 1;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .process-card {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 400px;
        text-align: center;
    }

    .process-card h5 {
        margin-bottom: 15px;
    }

    .process-card select {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .process-card button {
        width: 100%;
    }
</style>

<!-- Layout principal -->
<div class="d-flex vh-100">
    <!-- Barra lateral com informações do usuário -->
    <div class="sidebar">
        @if (user != null)
        {
            <div class="user-avatar">
                <img src="@user.ProfilePictureUrl"
                     alt="Foto do Usuário"
                     onerror="this.onerror=null; this.src='https://via.placeholder.com/80';">
            </div>

            <div class="user-info">
                <h5>@user.Name</h5>
                <p>@user.Department.Name</p>
            </div>

            <div class="user-details">
                <p><strong>Email:</strong> @user.Email</p>
                <p><strong>Tipo de Usuário:</strong> @user.UserType.Name</p>
                <p><strong>Processo Atual:</strong> @(user.CurrentProcess?.Name ?? "Nenhum processo aberto")</p>
                <p><strong>Ocorrência Atual:</strong> @(user.CurrentOccurrence?.Name ?? "Nenhuma ocorrência aberta")</p>
            </div>

            <button class="btn-circle" @onclick="Logout">
                <i class="fas fa-arrow-left"></i>
            </button>
        }
    </div>

    <!-- Área principal -->
    <div class="main-content">
        @if (user?.CurrentProcess == null)
        {
            <div class="process-card">
                <h5>Iniciar Novo Processo</h5>

                <select @bind="selectedProcessTypeId">
                    <option value="">Selecione um tipo de processo</option>
                    @foreach (var processType in processTypes)
                    {
                        <option value="@processType.Id">@processType.Name</option>
                    }
                </select>

                <select @bind="selectedMachineId">
                    <option value="">Selecione uma máquina</option>
                    @foreach (var machine in machines)
                    {
                        <option value="@machine.Id">@($"{machine.Name} - {machine.IdentificationNumber}")</option>
                    }
                </select>

                <button class="btn btn-success mt-2" 
                        @onclick="StartProcess" 
                        disabled="@string.IsNullOrEmpty(selectedProcessTypeId) || string.IsNullOrEmpty(selectedMachineId)">
                    Iniciar Processo
                </button>
            </div>
        }
        else
        {
            <div class="process-card">
                <h5>Processo em Andamento</h5>
                <p><strong>Tipo:</strong> @processDetails?.ProcessType.Name</p>
                <p><strong>Iniciado em:</strong> @processDetails?.StartDate.ToString("dd/MM/yyyy HH:mm")</p>
                <p><strong>Tempo decorrido:</strong> @processDetails?.ProcessTime</p>

                @if (processDetails?.PreIndustrialization == false) 
                {
                    <p><strong>Máquina:</strong> @(processDetails?.Machine?.Name ?? "Não especificado")</p>
                }

                <p><strong>Ocorrências:</strong> @(processDetails?.Occurrences != null && processDetails.Occurrences.Any() ? string.Join(", ", processDetails.Occurrences.Select(o => o.Name)) : "Nenhuma ocorrência registrada")</p>
            </div>
        }
    </div>
</div>

@code {
    private UserModel? user;
    private List<ReferenceEntity> processTypes = new();
    private List<MachineModel> machines = new();
    private string selectedProcessTypeId = "";
    private string selectedMachineId = "";
    private ProcessModel? processDetails;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var idNumber = query.Get("identificationNumber");

        if (!string.IsNullOrEmpty(idNumber))
        {
            await LoadUser(idNumber);
            await LoadProcessTypes();
            await LoadMachines();
        }
        else
        {
            Navigation.NavigateTo("/industria/login");
        }
    }

    private async Task LoadUser(string identificationNumber)
    {
        user = await Http.GetFromJsonAsync<UserModel>($"api/User/identification/{identificationNumber}");
        if (user?.CurrentProcess != null)
        {
            await LoadProcessDetails(user.CurrentProcess.Id);
        }
    }

    private async Task LoadProcessTypes()
    {
        processTypes = await Http.GetFromJsonAsync<List<ReferenceEntity>>("api/ProcessType") ?? new List<ReferenceEntity>();
    }

    private async Task LoadMachines()
    {
        machines = await Http.GetFromJsonAsync<List<MachineModel>>("api/Machine") ?? new List<MachineModel>();
    }

    private async Task LoadProcessDetails(string processId)
    {
        processDetails = await Http.GetFromJsonAsync<ProcessModel>($"api/Process/{processId}");
    }

    private async Task StartProcess()
    {
        if (string.IsNullOrEmpty(selectedProcessTypeId) || string.IsNullOrEmpty(selectedMachineId) || user == null) return;

        var request = new
        {
            IdentificationNumber = user.IdentificationNumber,
            ProcessTypeId = selectedProcessTypeId,
            MachineId = selectedMachineId
        };

        var response = await Http.PostAsJsonAsync("api/Process/start-process", request);

        if (response.IsSuccessStatusCode)
        {
            await LoadUser(user.IdentificationNumber);
        }
    }

    private void Logout() => Navigation.NavigateTo("/industria/login");

    private class UserModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string ProfilePictureUrl { get; set; } = "https://via.placeholder.com/80";
        public ReferenceEntity UserType { get; set; } = new();
        public ReferenceEntity Department { get; set; } = new();
        public ReferenceEntity? CurrentProcess { get; set; } = null;
        public ReferenceEntity? CurrentOccurrence { get; set; } = null;
        public string IdentificationNumber { get; set; } = string.Empty;
    }

    private class ReferenceEntity
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }

    private class ProcessModel
    {
        public string Id { get; set; } = string.Empty;
        public string IdentificationNumber { get; set; } = string.Empty;
        public string ProcessTime { get; set; } = "00:00:00";
        public DateTime StartDate { get; set; } = DateTime.UtcNow;
        public DateTime? EndDate { get; set; }
        public ReferenceEntity User { get; set; } = new();
        public ReferenceEntity Department { get; set; } = new();
        public ReferenceEntity ProcessType { get; set; } = new();
        public ReferenceEntity Machine { get; set; } = new();
        public List<ReferenceEntity>? Occurrences { get; set; } = new();
        public bool InOccurrence { get; set; }
        public bool? PreIndustrialization { get; set; }
    }
    private class MachineModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string CustomerName { get; set; } = string.Empty;
        public string IdentificationNumber { get; set; } = string.Empty;
        public string Phase { get; set; } = string.Empty;
        public string Voltage { get; set; } = string.Empty;
        public ProcessModel Process { get; set; } = new();
        public ReferenceEntity Quality { get; set; } = new();
        public ReferenceEntity Monitoring { get; set; } = new(); // Ajustado para pegar diretamente o Name
    }
}
