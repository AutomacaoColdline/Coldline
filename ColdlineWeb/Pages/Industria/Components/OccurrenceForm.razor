@using ColdlineWeb.Models
@using ColdlineWeb.Services

@inject IndustriaService IndustriaService

@code {
    [Parameter] public EventCallback<StartOccurrenceModel> OnStartOccurrence { get; set; }
    [Parameter] public EventCallback OnClose { get; set; } 
    [Parameter] public string ProcessId { get; set; } = string.Empty;
    [Parameter] public ProcessModel? ProcessDetails { get; set; }

    private string selectedPauseTypeId = "";
    private string selectedDefectId = "";
    private List<ReferenceEntity> pauseTypes = new();
    private List<ReferenceEntity> defects = new();
    private bool isLoading = true; 

    protected override async Task OnInitializedAsync()
    {
        pauseTypes = await IndustriaService.GetPauseTypesAsync();
        defects = await IndustriaService.GetDefectsAsync();

        if (ProcessDetails == null || string.IsNullOrWhiteSpace(ProcessDetails.Id))
        {
            ProcessDetails = await IndustriaService.GetProcessById(ProcessId);
        }

        isLoading = false; 
        StateHasChanged();
    }

    private bool CanStartOccurrence =>
        !string.IsNullOrWhiteSpace(selectedPauseTypeId) &&
        ProcessDetails?.User != null && 
        !string.IsNullOrWhiteSpace(ProcessDetails.User.Id);

    private async Task HandleStartOccurrence()
    {
        if (!CanStartOccurrence) return;

        var pauseType = pauseTypes.FirstOrDefault(pt => pt.Id == selectedPauseTypeId);
        var defect = defects.FirstOrDefault(d => d.Id == selectedDefectId);

        var occurrenceModel = new StartOccurrenceModel
        {
            CodeOccurrence = "",
            Process = new ReferenceEntity { Id = ProcessId.Trim() },
            PauseType = pauseType ?? new ReferenceEntity(),
            Defect = defect ?? new ReferenceEntity(),
            User = new ReferenceEntity
            { 
                Id = ProcessDetails?.User?.Id ?? "",
                Name = ProcessDetails?.User?.Name ?? "Usuário Desconhecido"
            }
        };

        await OnStartOccurrence.InvokeAsync(occurrenceModel);
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
}

@if (isLoading)
{
    <p>Carregando...</p>
}
else
{
    <div class="modal">
        <div class="modal-content">
            <button class="btn-close" @onclick="CloseModal">
                ✖
            </button>

            <h5>Registrar Nova Ocorrência</h5>

            <div class="form-group">
                <label>Tipo de Pausa</label>
                <select @bind="selectedPauseTypeId" class="form-control">
                    <option value="">Selecione um tipo</option>
                    @foreach (var type in pauseTypes)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label>Defeito (Opcional)</label>
                <select @bind="selectedDefectId" class="form-control">
                    <option value="">Nenhum</option>
                    @foreach (var defect in defects)
                    {
                        <option value="@defect.Id">@defect.Name</option>
                    }
                </select>
            </div>

            <button class="btn btn-primary mt-2" @onclick="HandleStartOccurrence" disabled="@(!CanStartOccurrence)">
                Registrar Ocorrência
            </button>
        </div>
    </div>
}
