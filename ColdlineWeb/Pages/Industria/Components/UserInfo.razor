@using ColdlineWeb.Models
@using ColdlineWeb.Services

@inject IndustriaService IndustriaService

@code {
    [Parameter] public ProcessModel? ProcessDetails { get; set; }
    [Parameter] public List<OccurrenceModel> ProcessOccurrences { get; set; } = new();
    private bool showOccurrenceForm = false;

    protected override async Task OnInitializedAsync()
    {
        if (ProcessDetails?.Id != null)
        {
            // Obtém as ocorrências do processo
            var occurrenceIds = ProcessDetails.Occurrences?.Select(o => o.Id).ToList() ?? new List<string>();
            ProcessOccurrences = await IndustriaService.GetOccurrencesByProcessAsync(occurrenceIds);
        }
    }

    private async Task StartOccurrence(StartOccurrenceModel occurrenceModel)
    {
        if (IndustriaService == null) return;

        var success = await IndustriaService.StartOccurrenceAsync(occurrenceModel);
        if (success)
        {
            // Adiciona a nova ocorrência à lista e recarrega a exibição
            ProcessOccurrences.Add(new OccurrenceModel
            {
                Id = occurrenceModel.Process.Id,
                CodeOccurrence = occurrenceModel.CodeOccurrence,
                Process = new ReferenceEntity { Id = occurrenceModel.Process.Id },
                PauseType = occurrenceModel.PauseType,
                Defect = occurrenceModel.Defect,
                User = occurrenceModel.User
            });

            showOccurrenceForm = false;
            StateHasChanged(); // Atualiza a interface
        }
    }
}

<div class="process-header">
    <div class="process-info">
        <strong>Número do processo:</strong> @ProcessDetails.IdentificationNumber |
        <strong>Tipo:</strong> @ProcessDetails.ProcessType?.Name |
        <strong>Máquina:</strong> @(ProcessDetails.Machine?.Name ?? "Não aplicável") |
        <strong>Tempo decorrido:</strong> @ProcessDetails.ProcessTime |
        <strong>Pré-industrialização:</strong> @(ProcessDetails.PreIndustrialization ?? false ? "Sim" : "Não")
    </div>
    
    <button class="btn-register-occurrence" @onclick="() => showOccurrenceForm = true">
        Registrar Ocorrência
    </button>
</div>

@if (showOccurrenceForm)
{
    <OccurrenceForm OnStartOccurrence="StartOccurrence" ProcessId="@ProcessDetails.Id" />
}

@if (ProcessOccurrences != null && ProcessOccurrences.Any())
{
    <h5>Ocorrências Registradas</h5>
    <div class="occurrence-list">
        @foreach (var occurrence in ProcessOccurrences)
        {
            <div class="occurrence-item">
                <span><strong>Código:</strong> @occurrence.CodeOccurrence</span>
                <span><strong>Tipo de Pausa:</strong> @occurrence.PauseType.Name</span>
                <span><strong>Defeito:</strong> @(occurrence.Defect?.Name ?? "Não informado")</span>
                <span><strong>Tempo:</strong> @occurrence.ProcessTime</span>
            </div>
        }
    </div>
}
