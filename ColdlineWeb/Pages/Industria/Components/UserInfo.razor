@using ColdlineWeb.Models
@using ColdlineWeb.Services
@inject NavigationManager Navigation
@inject IndustriaService IndustriaService

@code {
    [Parameter] public ProcessModel? ProcessDetails { get; set; }
    [Parameter] public List<OccurrenceModel> ProcessOccurrences { get; set; } = new();
    private bool showOccurrenceForm = false;
    private string errorMessage = "";
    protected TimeSpan elapsedTime;
    protected System.Timers.Timer? _timer;
    protected TimeSpan occurrenceElapsedTime;
    protected System.Timers.Timer? _occurrenceTimer;
    private Dictionary<string, TimeSpan> _occurrenceTimes = new();
    protected OccurrenceModel? ActiveOccurrence;
    private string occurrenceWarningMessage = "";


    protected void StartTimer()
    {
        _timer = new System.Timers.Timer(1000); // 1 segundo
        _timer.Elapsed += async (sender, args) =>
        {
            elapsedTime = elapsedTime.Add(TimeSpan.FromSeconds(1));
            await InvokeAsync(StateHasChanged);
        };
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }
    protected void StopTimer()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;
    }

    protected string GetFormattedTime()
    {
        if (ProcessOccurrences.Any(o => !o.Finished))
        {
            // OcorrÃªncia em aberto â†’ mostrar apenas o tempo vindo da API
            var fixedTime = ParseTime(ProcessDetails?.ProcessTime);
            return $"{fixedTime.Hours:D2}:{fixedTime.Minutes:D2}:{fixedTime.Seconds:D2}";
        }

        // Caso contrÃ¡rio, exibe o tempo atualizado
        return $"{elapsedTime.Hours:D2}:{elapsedTime.Minutes:D2}:{elapsedTime.Seconds:D2}";
    }


    protected TimeSpan ParseTime(string? timeString)
    {
        return TimeSpan.TryParse(timeString, out var result) ? result : TimeSpan.Zero;
    }

    protected override async Task OnInitializedAsync()
    {
        if (ProcessDetails?.Id != null)
        {
            var occurrenceIds = ProcessDetails.Occurrences?.Select(o => o.Id).ToList() ?? new List<string>();
            ProcessOccurrences = await IndustriaService.GetOccurrencesByProcessAsync(occurrenceIds);
            elapsedTime = ParseTime(ProcessDetails.ProcessTime);
            StartTimer(); // Inicia o cronÃ´metro
            ActiveOccurrence = ProcessOccurrences.FirstOrDefault(o => !o.Finished);
            if (ActiveOccurrence != null)
            {
                var baseTime = ParseTime(ActiveOccurrence.ProcessTime);
                _occurrenceTimes[ActiveOccurrence.Id] = baseTime;
                StartOccurrenceTimer();
            }
        }
    }
    protected void StartOccurrenceTimer()
    {
        StopOccurrenceTimer(); // evita timer duplicado

        _occurrenceTimer = new System.Timers.Timer(1000); // 1s
        _occurrenceTimer.Elapsed += async (sender, args) =>
        {
            if (ActiveOccurrence != null && _occurrenceTimes.ContainsKey(ActiveOccurrence.Id))
            {
                _occurrenceTimes[ActiveOccurrence.Id] = _occurrenceTimes[ActiveOccurrence.Id].Add(TimeSpan.FromSeconds(1));
            }

            await InvokeAsync(StateHasChanged);
        };
        _occurrenceTimer.AutoReset = true;
        _occurrenceTimer.Enabled = true;
    }

    private async Task StartOccurrence(StartOccurrenceModel occurrenceModel)
    {
        if (IndustriaService == null) return;

        var newOccurrence = await IndustriaService.StartOccurrenceAsync(occurrenceModel);
        if (newOccurrence != null)
        {
            ProcessOccurrences.Add(newOccurrence);
            ProcessDetails!.Occurrences.Add(new ReferenceEntity { Id = newOccurrence.Id, Name = newOccurrence.CodeOccurrence });
            
            ActiveOccurrence = newOccurrence;
            _occurrenceTimes[newOccurrence.Id] = ParseTime(newOccurrence.ProcessTime);
            StartOccurrenceTimer();
            showOccurrenceForm = false;
            StateHasChanged();
        }
    }

    private async Task FinalizeOccurrence(string occurrenceId)
    {
        var success = await IndustriaService.EndOccurrenceAsync(occurrenceId);
        if (success)
        {
            var occurrence = ProcessOccurrences.FirstOrDefault(o => o.Id == occurrenceId);
            if (occurrence != null) occurrence.Finished = true;

            ActiveOccurrence = null;
            StopOccurrenceTimer();
        }
        else
        {
            errorMessage = "Erro ao finalizar a ocorrÃªncia.";
        }
    }

    protected void StopOccurrenceTimer()
    {
        _occurrenceTimer?.Stop();
        _occurrenceTimer?.Dispose();
        _occurrenceTimer = null;
    }

    private async Task FinalizeProcess()
    {
        if (ProcessDetails == null || string.IsNullOrWhiteSpace(ProcessDetails.Id))
        {
            errorMessage = "Processo invÃ¡lido.";
            return;
        }

        bool success = await IndustriaService.EndProcessAsync(ProcessDetails.Id);
        if (success)
        {
            StopTimer();
            Navigation.NavigateTo("/industria", forceLoad: true);
        }
        else
        {
            errorMessage = "Erro ao finalizar o processo.";
        }
    }

    private void CloseOccurrenceForm()
    {
        showOccurrenceForm = false;
        StateHasChanged();
    }

    private string GetOccurrenceStatusClass()
    {
        if (ProcessOccurrences == null || !ProcessOccurrences.Any()) 
            return "indicator-green"; // Nenhuma ocorrÃªncia â†’ Verde
        
        bool hasActiveOccurrence = ProcessOccurrences.Any(o => !o.Finished);

        return hasActiveOccurrence ? "indicator-red" : "indicator-green"; 
    }
    protected string GetFormattedOccurrenceTime(OccurrenceModel occurrence)
    {
        if (!occurrence.Finished && _occurrenceTimes.TryGetValue(occurrence.Id, out var runningTime))
        {
            return $"{runningTime.Hours:D2}:{runningTime.Minutes:D2}:{runningTime.Seconds:D2}";
        }

        var baseTime = ParseTime(occurrence.ProcessTime);
        return $"{baseTime.Hours:D2}:{baseTime.Minutes:D2}:{baseTime.Seconds:D2}";
    }
    private void TryOpenOccurrenceForm()
    {
        // Se existir ocorrÃªncia ativa, nÃ£o abre o modal
        if (ProcessOccurrences.Any(o => !o.Finished))
        {
            occurrenceWarningMessage = "JÃ¡ existe uma ocorrÃªncia em andamento. Finalize-a antes de iniciar outra.";
            showOccurrenceForm = false;
        }
        else
        {
            // Sem ocorrÃªncias ativas â†’ limpa aviso e abre o modal
            occurrenceWarningMessage = "";
            showOccurrenceForm = true;
        }

        StateHasChanged();
    }

}

<div class="process-header">
    <!-- ðŸ“Œ Indicador de OcorrÃªncia -->
    <div class="status-indicator @(GetOccurrenceStatusClass())"></div>

    <div class="process-info">
        <strong>Tipo:</strong> @ProcessDetails.ProcessType?.Name |
        <strong>MÃ¡quina:</strong> @(ProcessDetails.Machine?.Name ?? "NÃ£o aplicÃ¡vel") |
        <strong>Tempo decorrido:</strong> @GetFormattedTime() | |
        <strong>PrÃ©-industrializaÃ§Ã£o:</strong> @(ProcessDetails.PreIndustrialization ?? false ? "Sim" : "NÃ£o")
    </div>
    
    <button class="btn-register-occurrence" @onclick="TryOpenOccurrenceForm">
        Registrar OcorrÃªncia
    </button>

    <button class="btn-finalize-process" @onclick="FinalizeProcess">
        Finalizar Processo
    </button>
</div>

@if (showOccurrenceForm)
{
    <OccurrenceForm OnStartOccurrence="StartOccurrence" ProcessId="@ProcessDetails.Id" OnClose="CloseOccurrenceForm" />
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
@if (!string.IsNullOrEmpty(occurrenceWarningMessage))
{
    <p class="text-warning">@occurrenceWarningMessage</p>
}

@if (ProcessOccurrences != null && ProcessOccurrences.Any())
{
    <h5>OcorrÃªncias Registradas</h5>
    <div class="occurrence-list">
        @foreach (var occurrence in ProcessOccurrences)
        {
            <div class="occurrence-item">
                <span><strong>Tipo de Pausa:</strong> @occurrence.PauseType.Name</span>
                <span><strong>Defeito:</strong> @(occurrence.Defect?.Name ?? "NÃ£o informado")</span>
                <span><strong>Tempo:</strong> @GetFormattedOccurrenceTime(occurrence)</span>

                @if (!occurrence.Finished)
                {
                    <button class="btn btn-danger btn-sm" @onclick="() => FinalizeOccurrence(occurrence.Id)">Finalizar</button>
                }
                else
                {
                    <span class="badge bg-success">Finalizada</span>
                }
            </div>
        }
    </div>
}
@if (!string.IsNullOrEmpty(occurrenceWarningMessage))
{
    <div class="overlay">
        <div class="modal-warning">
            <p>@occurrenceWarningMessage</p>
            <button class="btn btn-warning" @onclick="() => occurrenceWarningMessage = string.Empty">Fechar</button>
        </div>
    </div>
}