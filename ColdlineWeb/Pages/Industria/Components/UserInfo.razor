@using ColdlineWeb.Models
@using ColdlineWeb.Services

@inject IndustriaService IndustriaService

@code {
    [Parameter] public ProcessModel? ProcessDetails { get; set; }
    [Parameter] public List<OccurrenceModel> ProcessOccurrences { get; set; } = new();
    private bool showOccurrenceForm = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        if (ProcessDetails?.Id != null)
        {
            // ObtÃ©m as ocorrÃªncias mais recentes do servidor
            var occurrenceIds = ProcessDetails.Occurrences?.Select(o => o.Id).ToList() ?? new List<string>();
            ProcessOccurrences = await IndustriaService.GetOccurrencesByProcessAsync(occurrenceIds);
        }
    }

    private async Task StartOccurrence(StartOccurrenceModel occurrenceModel)
    {
        if (IndustriaService == null) return;

        var newOccurrence = await IndustriaService.StartOccurrenceAsync(occurrenceModel);
        if (newOccurrence != null)
        {
            // ðŸ”¹ Atualiza a lista com a ID correta retornada pelo servidor
            ProcessOccurrences.Add(newOccurrence);
            ProcessDetails!.Occurrences.Add(new ReferenceEntity { Id = newOccurrence.Id, Name = newOccurrence.CodeOccurrence });

            showOccurrenceForm = false;
            StateHasChanged();
        }
    }

    private async Task FinalizeOccurrence(string occurrenceId)
    {
        var success = await IndustriaService.EndOccurrenceAsync(occurrenceId);
        if (success)
        {
            // ðŸ”¹ Remove a ocorrÃªncia da lista apÃ³s finalizÃ¡-la
            var occurrence = ProcessOccurrences.FirstOrDefault(o => o.Id == occurrenceId);
            if (occurrence != null) occurrence.Finished = true;

            StateHasChanged();
        }
        else
        {
            errorMessage = "Erro ao finalizar a ocorrÃªncia.";
        }
    }
}

<div class="process-header">
    <div class="process-info">
        <strong>NÃºmero do processo:</strong> @ProcessDetails.IdentificationNumber |
        <strong>Tipo:</strong> @ProcessDetails.ProcessType?.Name |
        <strong>MÃ¡quina:</strong> @(ProcessDetails.Machine?.Name ?? "NÃ£o aplicÃ¡vel") |
        <strong>Tempo decorrido:</strong> @ProcessDetails.ProcessTime |
        <strong>PrÃ©-industrializaÃ§Ã£o:</strong> @(ProcessDetails.PreIndustrialization ?? false ? "Sim" : "NÃ£o")
    </div>
    
    <button class="btn-register-occurrence" @onclick="() => showOccurrenceForm = true">
        Registrar OcorrÃªncia
    </button>
</div>

@if (showOccurrenceForm)
{
    <OccurrenceForm OnStartOccurrence="StartOccurrence" ProcessId="@ProcessDetails.Id" />
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@if (ProcessOccurrences != null && ProcessOccurrences.Any())
{
    <h5>OcorrÃªncias Registradas</h5>
    <div class="occurrence-list">
        @foreach (var occurrence in ProcessOccurrences)
        {
            <div class="occurrence-item">
                <span><strong>CÃ³digo:</strong> @occurrence.CodeOccurrence</span>
                <span><strong>Tipo de Pausa:</strong> @occurrence.PauseType.Name</span>
                <span><strong>Defeito:</strong> @(occurrence.Defect?.Name ?? "NÃ£o informado")</span>
                <span><strong>Tempo:</strong> @occurrence.ProcessTime</span>

                @if (!occurrence.Finished)
                {
                    <button class="btn btn-danger btn-sm" @onclick="() => FinalizeOccurrence(occurrence.Id)">Finalizar</button>
                }
                else
                {
                    <span class="badge bg-success">Finalizada</span>
                }
            </div>
        }
    </div>
}
