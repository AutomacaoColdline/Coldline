@page "/machines"
@inject HttpClient Http
@using ColdlineWeb.Services;
@using ColdlineWeb.Models;
@using ColdlineWeb.Models.Enum;

<h3>Gerenciamento de Máquinas</h3>

@if (isLoading)
{
    <p>Carregando...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="OpenAddMachineModal">Adicionar Máquina</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Tipo de Máquina</th>
                <th>Nome do Cliente</th>
                <th>Número de Identificação</th>
                <th>Fase</th>
                <th>Voltagem</th>
                <th>Processo</th>
                <th>Qualidade</th>
                <th>Monitoramento</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machine in machines)
            {
                <tr>
                    <td>@(machine.MachineType?.Name ?? "Sem Tipo")</td>
                    <td>@machine.CustomerName</td>
                    <td>@machine.IdentificationNumber</td>
                    <td>@machine.Phase</td>
                    <td>@machine.Voltage</td>
                    <td>@(machine.Process?.Name ?? "Sem Processo")</td>
                    <td>@(machine.Quality?.Name ?? "Sem Qualidade")</td>
                    <td>@(machine.Monitoring?.Name ?? "Sem Monitoramento")</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => OpenEditMachineModal(machine)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteMachine(machine.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Máquina" : "Adicionar Máquina")</h5>
                    <button class="close" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">

                    <label>Nome do Cliente:</label>
                    <input class="form-control" @bind="currentMachine.CustomerName" />

                    <label>Número de Identificação:</label>
                    <input class="form-control" @bind="currentMachine.IdentificationNumber" />

                    <label>Fase:</label>
                    <input class="form-control" @bind="currentMachine.Phase" />

                    <label>Voltagem:</label>
                    <input class="form-control" @bind="currentMachine.Voltage" />

                    <label>Tipo de Máquina:</label>
                    <select class="form-control" @bind="currentMachine.MachineType.Id">
                        @foreach (var machineType in machineTypes)
                        {
                            <option value="@machineType.Id">@machineType.Name</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-success" @onclick="SaveMachine">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<MachineModel> machines = new();
    private List<ProcessModel> processes = new();
    private List<ReferenceEntity> machineTypes = new();
    private MachineModel currentMachine = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            machines = await Http.GetFromJsonAsync<List<MachineModel>>("api/Machine") ?? new();
            processes = await Http.GetFromJsonAsync<List<ProcessModel>>("api/Process") ?? new();
            machineTypes = await Http.GetFromJsonAsync<List<ReferenceEntity>>("api/MachineType") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar dados.";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenAddMachineModal()
    {
        currentMachine = new MachineModel
        {
            MachineType = new ReferenceEntity(),
            Process = new ReferenceEntity(),
            Quality = new ReferenceEntity(),
            Monitoring = new ReferenceEntity()
        };
        showModal = true;
        isEditing = false;
    }

    private void OpenEditMachineModal(MachineModel machine)
    {
        currentMachine = new MachineModel
        {
            Id = machine.Id,
            CustomerName = machine.CustomerName,
            IdentificationNumber = machine.IdentificationNumber,
            Phase = machine.Phase,
            Voltage = machine.Voltage,
            Process = machine.Process ?? new ReferenceEntity(),
            Quality = machine.Quality ?? new ReferenceEntity(),
            Monitoring = machine.Monitoring ?? new ReferenceEntity(),
            MachineType = machine.MachineType ?? new ReferenceEntity()
        };
        showModal = true;
        isEditing = true;
    }

    private async Task SaveMachine()
    {
        var fetchedMachineType = await Http.GetFromJsonAsync<ReferenceEntity>($"api/MachineType/{currentMachine.MachineType.Id}");
        currentMachine.MachineType.Name = fetchedMachineType.Name;
        currentMachine.Process = null;
        currentMachine.Monitoring = null;
        currentMachine.Quality = null;
        if (isEditing)
        {
            await Http.PutAsJsonAsync($"api/Machine/{currentMachine.Id}", currentMachine);
        }
        else
        {
            await Http.PostAsJsonAsync("api/Machine", currentMachine);
        }
        showModal = false;
        await LoadData();
    }

    private async Task DeleteMachine(string id)
    {
        await Http.DeleteAsync($"api/Machine/{id}");
        await LoadData();
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private class MachineModel
    {
        public string Id { get; set; } = string.Empty;
        public string CustomerName { get; set; } = string.Empty;
        public string IdentificationNumber { get; set; } = string.Empty;
        public string Phase { get; set; } = string.Empty;
        public string Voltage { get; set; } = string.Empty;
        public ReferenceEntity Process { get; set; } = new();
        public ReferenceEntity Quality { get; set; } = new();
        public ReferenceEntity Monitoring { get; set; } = new();
        public ReferenceEntity MachineType { get; set; } = new();
        public MachineStatus Status { get; set; }
    }

    private class ProcessModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }

    private class ReferenceEntity
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
}
