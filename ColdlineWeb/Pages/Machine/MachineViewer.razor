@page "/machineViewer/{Id}"

@using ColdlineWeb.Services
@inject MachineService MachineService
@inject ProcessService ProcessService
@inject NavigationManager Navigation

@using ColdlineWeb.Models
@using ColdlineWeb.Models.Filter
@using ColdlineWeb.Helpers
@using ColdlineWeb.Models.Enum



<link rel="stylesheet" href="css/MachineViewer.css" />

@if (isLoading)
{
    <div class="loader-wrapper">
        <div class="custom-loader"></div>
        <span class="loading-text">Carregando detalhes da m√°quina...</span>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (machine != null)
{
    <div class="viewer-container">
        @if (machine.Status != MachineStatus.Finished)
        {
            <button class="finalize-button" @onclick="() => FinalizeMachine(machine.Id)">
                <img src="img/finalizar.png" alt="Finalizar" />
            </button>
        }
        <div class="machine-box">
            <h3>üîß Detalhes da M√°quina</h3>
            <div><strong>Cliente:</strong> @machine.CustomerName</div>
            <div><strong>Identifica√ß√£o:</strong> @machine.IdentificationNumber</div>
            <div><strong>Fase:</strong> @machine.Phase</div>
            <div><strong>Voltagem:</strong> @machine.Voltage</div>
            <div><strong>Status:</strong> @(machine.Status?.GetDisplayName() ?? "Desconhecido")</div>
            <div><strong>Tipo de M√°quina:</strong> @machine.MachineType?.Name</div>
            <div><strong>Qualidade:</strong> @(machine.Quality?.Name ?? "N√£o disponivel")</div>
            <div><strong>Monitoramento:</strong> @(machine.Monitoring?.Name ?? "Nenhum")</div>
            <div><strong>Tempo:</strong> @machine.Time</div>
        </div>

        <div class="processes-box">
            <h3>üìã Processos com esta M√°quina</h3>
            @if (processes.Count == 0)
            {
                <div class="no-info">Nenhum processo encontrado para esta m√°quina.</div>
            }
            else
            {
                @foreach (var proc in processes)
                {
                    <div class="process-card">
                        <div><strong>N¬∫ Identifica√ß√£o:</strong> @proc.IdentificationNumber</div>
                        <div><strong>In√≠cio:</strong> @proc.StartDate.ToString("dd/MM/yyyy HH:mm")</div>
                        <div><strong>T√©rmino:</strong> @(proc.EndDate?.ToString("dd/MM/yyyy HH:mm") ?? "N√£o finalizado")</div>
                        <div><strong>Tempo Total:</strong> @proc.ProcessTime</div>
                        <div><strong>Usu√°rio:</strong> @proc.User.Name</div>
                        <div><strong>Departamento:</strong> @proc.Department.Name</div>
                        <div><strong>Tipo de Processo:</strong> @proc.ProcessType.Name</div>
                        <div><strong>Re-trabalho:</strong> @(proc.ReWork ? "Sim" : "N√£o")</div>
                        <div><strong>Pr√©-Industrializa√ß√£o:</strong> @(proc.PreIndustrialization == true ? "Sim" : proc.PreIndustrialization == false ? "N√£o" : "N√£o informado")</div>
                        <div><strong>Ocorr√™ncias:</strong> @(proc.Occurrences?.Count ?? 0)</div>
                    </div>
                }
            }
        </div>

        <button class="btn-back" @onclick="GoBack">‚Üê Voltar</button>
    </div>
}

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private MachineModel? machine;
    private List<ProcessModel> processes = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            machine = await MachineService.GetMachineByIdAsync(Id);
            if (machine == null)
            {
                errorMessage = "M√°quina n√£o encontrada.";
                return;
            }

            var filter = new ProcessFilterModel
            {
                MachineId = machine.Id,
                Page = 1,
                PageSize = 100
            };

            processes = await ProcessService.SearchProcessesAsync(filter);
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar informa√ß√µes.";
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task FinalizeMachine(string id)
    {
        try
        {
            var success = await MachineService.FinalizeMachineAsync(id);
            if (success)
            {
                // Recarrega os dados atualizados da m√°quina
                machine = await MachineService.GetMachineByIdAsync(id);
                StateHasChanged();
            }
            else
            {
                errorMessage = "Falha ao finalizar m√°quina.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao finalizar m√°quina.";
            Console.WriteLine(ex.Message);
        }
    }

    

    private void GoBack() => Navigation.NavigateTo("/home");
}
