@page "/machinetypes"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Gerenciamento de Tipo de Maquinas</h3>

@if (isLoading)
{
    <p>Carregando...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="ShowAddForm">Adicionar Tipo de Maquinas</button>

    @if (showForm)
    {
        <EditForm Model="newMachineType" OnValidSubmit="SaveMachineType">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="name" class="form-label">Nome</label>
                <InputText id="name" class="form-control" @bind-Value="newMachineType.Name" required />
            </div>
            <button type="submit" class="btn btn-success">Salvar</button>
            <button type="button" class="btn btn-secondary" @onclick="HideForm">Cancelar</button>
        </EditForm>
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machineType in machineType)
            {
                <tr>
                    <td>@machineType.Name</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditMachineType(machineType)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteMachineType(machineType.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<MachineType> machineType = new();
    private bool isLoading = true;
    private string? errorMessage;
    private bool showForm = false;
    private MachineType newMachineType = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMachineTypes();
    }

    private async Task LoadMachineTypes()
    {
        try
        {
            machineType = await Http.GetFromJsonAsync<List<MachineType>>("api/MachineType") ?? new List<MachineType>();
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar tipos de usuário.";
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddForm()
    {
        newMachineType = new MachineType();
        showForm = true;
    }

    private void EditMachineType(MachineType MachineType)
    {
        newMachineType = new MachineType { Id = MachineType.Id, Name = MachineType.Name };
        showForm = true;
    }

    private void HideForm()
    {
        showForm = false;
    }

    private async Task SaveMachineType()
    {
        try
        {
            if (string.IsNullOrEmpty(newMachineType.Id))
            {
                await Http.PostAsJsonAsync("api/MachineType", newMachineType);
            }
            else
            {
                await Http.PutAsJsonAsync($"api/MachineType/{newMachineType.Id}", newMachineType);
            }
            await LoadMachineTypes();
            showForm = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao salvar o tipo de usuário.";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task DeleteMachineType(string id)
    {
        try
        {
            await Http.DeleteAsync($"api/MachineType/{id}");
            await LoadMachineTypes();
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao excluir o tipo de usuário.";
            Console.WriteLine(ex.Message);
        }
    }

    private class MachineTypeModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
}
