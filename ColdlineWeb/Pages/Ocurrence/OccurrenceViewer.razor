@page "/occurrenceViewer/{Id}"
@inject HttpClient Http
@inject NavigationManager Navigation

@using ColdlineWeb.Models

<link rel="stylesheet" href="/css/OccurrenceViewer.css" />

@if (isLoading)
{
    <div class="loader-wrapper">
        <div class="custom-loader"></div>
        <span class="loading-text">Carregando ocorr√™ncia...</span>
    </div>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (occurrence != null)
{
    <div class="viewer-container">
        <div class="occurrence-box">
            <h3>üìã Detalhes da Ocorr√™ncia</h3>
            <div><strong>C√≥digo:</strong> @occurrence.CodeOccurrence</div>
            <div><strong>Tempo de Processo:</strong> @occurrence.ProcessTime</div>
            <div><strong>In√≠cio:</strong> @occurrence.StartDate.ToString("dd/MM/yyyy HH:mm")</div>
            <div><strong>T√©rmino:</strong> @(occurrence.EndDate?.ToString("dd/MM/yyyy HH:mm") ?? "N√£o finalizado")</div>
            <div><strong>Tipo de Pausa:</strong> @occurrence.PauseType?.Name</div>
            <div><strong>Defeito:</strong> @(occurrence.Defect?.Name ?? "Nenhum")</div>
            <div><strong>Usu√°rio:</strong> @occurrence.User.Name</div>
        </div>

        <button class="btn-back" @onclick="GoBack">‚Üê Voltar</button>
    </div>
}

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private OccurrenceModel? occurrence;
    private bool isLoading = true;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            occurrence = await Http.GetFromJsonAsync<OccurrenceModel>($"api/Occurrence/{Id}");
        }
        catch (Exception ex)
        {
            error = "Erro ao carregar a ocorr√™ncia.";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack() => Navigation.NavigateTo("/home");
}
