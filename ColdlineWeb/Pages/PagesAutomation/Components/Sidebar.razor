@using ColdlineWeb.Models
@inject IJSRuntime JS

@code {
    [Parameter] public UserModel? User { get; set; }
    [Parameter] public EventCallback OnLogout { get; set; }
    [Parameter] public EventCallback<string> OnNavigate { get; set; }

    private bool isCollapsed;
    private bool isDarkMode;

    private Task Go(string key)
        => OnNavigate.HasDelegate ? OnNavigate.InvokeAsync(key) : Task.CompletedTask;

    private void ToggleSidebar() => isCollapsed = !isCollapsed;

    private async Task OnDarkModeChanged(ChangeEventArgs e)
    {
        isDarkMode = e?.Value is bool val && val;
        await JS.InvokeVoidAsync(
            "eval",
            $"document.body.classList.toggle('dark-mode', {isDarkMode.ToString().ToLower()});"
        );
    }
}

<div class="sidebar @(isCollapsed ? "collapsed" : "")">
    <!-- BotÃ£o abrir/fechar -->
    <button class="toggle-btn" @onclick="ToggleSidebar">
        <img src="img/automation/minimizar.png" alt="Toggle" />
    </button>

    <!-- Logo -->
    <div class="sidebar-header">
        <img src="img/automation/logo.png" alt="Logo Coldline" class="logo" />
    </div>

    <!-- UsuÃ¡rio -->
    @if (User != null)
    {
        <div class="user-section">
            <img src="@($"http://10.0.0.44:4000/uploads/{User.UrlPhoto}?t={DateTime.UtcNow.Ticks}")"
                 alt="Foto do UsuÃ¡rio"
                 onerror="this.onerror=null;this.src='https://via.placeholder.com/60';" />
            <div class="user-info">
                <strong>@User.Name</strong>
                <small>@User.Department?.Name</small>
            </div>
        </div>
    }

    <!-- Menu -->
    <nav class="sidebar-nav">
        <button class="nav-item" @onclick='() => Go("home")'>
            <img src="img/automation/notas.png" alt="Home" />
            <span>Dashboard</span>
        </button>

        <button class="nav-item" @onclick='() => Go("users")'>
            <img src="img/automation/equipe.png" alt="UsuÃ¡rios" />
            <span>UsuÃ¡rios</span>
        </button>

        <button class="nav-item" @onclick='() => Go("monitoring")'>
            <img src="img/automation/monitoramento.png" alt="Monitoramento" />
            <span>Monitoramento</span>
        </button>

        <button class="nav-item" @onclick='() => Go("configuration")'>
            <img src="img/automation/configuracao.png" alt="ConfiguraÃ§Ãµes" />
            <span>ConfiguraÃ§Ãµes</span>
        </button>

        <button class="nav-item" @onclick='() => Go("process")'>
            <img src="img/automation/processo.png" alt="Processos" />
            <span>Processos</span>
        </button>

        <button class="nav-item" @onclick='() => Go("ocorrencia")'>
            <img src="img/automation/ocorrencia.png" alt="OcorrÃªncias" />
            <span>OcorrÃªncias</span>
        </button>

        <button class="nav-item" @onclick='() => Go("relatorios")'>
            <img src="img/automation/relatorio.png" alt="RelatÃ³rios" />
            <span>RelatÃ³rios</span>
        </button>
    </nav>


    <!-- RodapÃ© -->
    <div class="sidebar-footer">
        <div class="dark-mode-toggle">
            <label>
                <input type="checkbox"
                       checked="@isDarkMode"
                       @onchange="OnDarkModeChanged" />
                <span>ðŸŒ™ Modo escuro</span>
            </label>
        </div>

        <button class="logout-btn" @onclick="() => OnLogout.InvokeAsync()">
            <img src="img/automation/sair.png" alt="Logout" />
            <span>Sair</span>
        </button>
    </div>
</div>
