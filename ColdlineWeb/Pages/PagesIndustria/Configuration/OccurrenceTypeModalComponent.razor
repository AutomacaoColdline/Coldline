@using ColdlineWeb.Models
@using ColdlineWeb.Services
@using ColdlineWeb.Util
@inject OccurrenceTypeService OccurrenceTypeService

@if (Visible)
{
    <div class="modal d-block">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">@((IsEdit ? "Editar" : "Adicionar") + " Tipo de Ocorrência")</h5>
                </div>

                <div class="modal-body">
                    <label class="form-label">Nome:</label>
                    <input class="form-control" @bind="OccurrenceType.Name" />

                    <label class="form-label mt-2">Descrição:</label>
                    <input class="form-control" @bind="OccurrenceType.Description" />

                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="chkPending" @bind="OccurrenceType.PendingEvent" />
                        <label class="form-check-label" for="chkPending">Possui evento pendente</label>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                    <button class="btn btn-success" @onclick="Save">Salvar</button>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter] public OccurrenceTypeModel OccurrenceType { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    private async Task Save()
    {
        OccurrenceType.Department = new ReferenceEntity();
        OccurrenceType.Department.Id = EnvironmentHelper.GetDepartmentId();
        OccurrenceType.Department.Name = "Industria";
        if (string.IsNullOrWhiteSpace(OccurrenceType.Name))
            return;

        if (IsEdit)
            await OccurrenceTypeService.UpdateAsync(OccurrenceType.Id, OccurrenceType);
        else
            await OccurrenceTypeService.CreateAsync(OccurrenceType);

        await OnSaved.InvokeAsync();          // chama LoadAll no pai
        await VisibleChanged.InvokeAsync(false);
    }

    private async Task Close() => await VisibleChanged.InvokeAsync(false);
}
