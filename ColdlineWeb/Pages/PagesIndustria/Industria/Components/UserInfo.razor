@using ColdlineWeb.Models
@using ColdlineWeb.Services
@using ColdlineWeb.Pages.PagesIndustria.Industria.Components
@inject NavigationManager Navigation
@inject ProcessService ProcessService

@code {
    [Parameter] public ProcessModel? ProcessDetails { get; set; }

    private string errorMessage = "";
    private bool isBusy = false;

    // Cronômetro
    private TimeSpan elapsedTime;
    private System.Timers.Timer? _timer;
    private DateTime _startTimestamp;

    // UI
    private bool showFinishPrompt = false;   // card “Sim/Não”
    private bool showOccurrenceForm = false; // form ocorrência

    protected override void OnInitialized()
    {
        if (ProcessDetails?.Id != null)
        {
            elapsedTime = ParseTime(ProcessDetails.ProcessTime);
            StartTimer();
        }
    }

    private void StartTimer()
    {
        _startTimestamp = DateTime.UtcNow - elapsedTime;
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += async (_, __) =>
        {
            elapsedTime = DateTime.UtcNow - _startTimestamp;
            await InvokeAsync(StateHasChanged);
        };
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private void StopTimer()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;
    }

    private TimeSpan ParseTime(string? s) => TimeSpan.TryParse(s, out var t) ? t : TimeSpan.Zero;
    private string GetFormattedTime() => $"{elapsedTime.Hours:D2}:{elapsedTime.Minutes:D2}:{elapsedTime.Seconds:D2}";

    // Botão "Finalizar processo" -> abre card Sim/Não
    private void AskFinish()
    {
        errorMessage = "";
        showFinishPrompt = true;
        showOccurrenceForm = false;
    }

    // SIM => finished=true, occurrence=null
    private async Task FinishYesAsync()
    {
        if (ProcessDetails?.Id is null)
        {
            errorMessage = "Processo inválido.";
            return;
        }

        isBusy = true;
        var ok = await ProcessService.EndProcessAsync(ProcessDetails.Id, true, null);
        isBusy = false;

        if (ok)
        {
            StopTimer();
            Navigation.NavigateTo("/industria", forceLoad: true);
        }
        else errorMessage = "Erro ao finalizar o processo.";
    }

    // NÃO => mostra form de ocorrência
    private void FinishNo_ShowOccurrenceForm()
    {
        showFinishPrompt = false;
        showOccurrenceForm = true;
    }

    // Recebe o payload do form e já envia finished=false + occurrence
    private async Task OnOccurrenceDraftReady(StartOccurrenceModel model)
    {
        if (ProcessDetails?.Id is null)
        {
            errorMessage = "Processo inválido.";
            return;
        }

        // garante Process
        model.Process ??= new ReferenceEntity
        {
            Id = ProcessDetails.Id,
            Name = ProcessDetails.ProcessType?.Name ?? "Processo"
        };

        // garante User
        if (model.User == null || string.IsNullOrWhiteSpace(model.User.Id))
        {
            model.User = new ReferenceEntity
            {
                Id = ProcessDetails?.User?.Id ?? string.Empty,
                Name = ProcessDetails?.User?.Name ?? string.Empty
            };
        }

        isBusy = true;
        var ok = await ProcessService.EndProcessAsync(ProcessDetails.Id, false, model);
        isBusy = false;

        if (ok)
        {
            StopTimer();
            Navigation.NavigateTo("/industria", forceLoad: true);
        }
        else
        {
            errorMessage = "Erro ao registrar ocorrência e finalizar o processo.";
            showOccurrenceForm = true;
        }
    }

    private void OnOccurrenceCanceled()
    {
        showOccurrenceForm = false;
        showFinishPrompt = false;
    }
}

<div class="process-header">
    <div class="process-info">
        <strong>Tipo:</strong> @ProcessDetails?.ProcessType?.Name |
        <strong>Máquina:</strong> @(ProcessDetails?.Machine?.Name ?? "Não aplicável") |
        <strong>Tempo decorrido:</strong> @GetFormattedTime() |
        <strong>Pré-industrialização:</strong> @(ProcessDetails?.PreIndustrialization ?? false ? "Sim" : "Não")
    </div>

    <button class="btn-finalize-process" @onclick="AskFinish" disabled="@isBusy">
        Finalizar Processo
    </button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@if (showFinishPrompt)
{
    <div class="card mt-3 p-3">
        <div class="card-body">
            <h5 class="card-title">Esse processo foi totalmente finalizado?</h5>
            <div class="mt-3 d-flex gap-2">
                <button class="btn btn-success" @onclick="FinishYesAsync" disabled="@isBusy">Sim</button>
                <button class="btn btn-outline-secondary" @onclick="FinishNo_ShowOccurrenceForm" disabled="@isBusy">Não</button>
            </div>
        </div>
    </div>
}

@if (showOccurrenceForm)
{
    <OccurrenceForm
        ProcessRef="@(ProcessDetails is null ? null : new ReferenceEntity { Id = ProcessDetails.Id, Name = ProcessDetails.ProcessType?.Name ?? "Processo" })"
        UserRef="@(ProcessDetails?.User)"
        OnSaveDraft="OnOccurrenceDraftReady"
        OnCancel="OnOccurrenceCanceled" />
}