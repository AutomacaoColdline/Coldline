@inject IJSRuntime JS
@inject HttpClient Http

<link rel="stylesheet" href="css/NumberMachineByTypeMachine.css" />

<div class="filtro-container">
    <label>De:
        <input @bind="startDate" type="date" />
    </label>
    <label>Até:
        <input @bind="endDate" type="date" />
    </label>
    <label>Tipo de Gráfico:
        <select @bind="chartType">
            <option value="bar">Barra</option>
            <option value="line">Linha</option>
        </select>
    </label>
    <button @onclick="GerarGraficoPorTipoMaquina">
        <img src="img/lupa.png" alt="Buscar" class="btn-icon" />
    </button>
</div>

<div class="grafico-container">
    <canvas id="machineTypeChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="js/numberMachineByTypeMachine.js"></script>

@code {
    private DateTime startDate = DateTime.Today.AddDays(-7);
    private DateTime endDate = DateTime.Today;
    private string chartType = "bar";

    private class MachineByTypeDto
    {
        public string Type { get; set; } = "";
        public int Count { get; set; }
    }

    private async Task GerarGraficoPorTipoMaquina()
    {
        var body = new
        {
            startDate = startDate.ToUniversalTime(),
            endDate = endDate.ToUniversalTime()
        };

        var response = await Http.PostAsJsonAsync("api/Machine/count-by-type", body);
        if (!response.IsSuccessStatusCode)
            return;

        var result = await response.Content.ReadFromJsonAsync<List<MachineByTypeDto>>();
        if (result == null)
            return;

        var labels = result.Select(x => x.Type).ToList();
        var values = result.Select(x => x.Count).ToList();

        await JS.InvokeVoidAsync("renderizarGraficoTipoMaquina", labels, values, chartType);
    }
}
