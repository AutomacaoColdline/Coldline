@inject IJSRuntime JS
@inject HttpClient Http

<link rel="stylesheet" href="css/NumberProcessByUsers.css" />

<div class="filtro-container">
    <label>De:
        <input @bind="startDate" type="date" />
    </label>
    <label>Até:
        <input @bind="endDate" type="date" />
    </label>
    <label>Tipo de Gráfico:
        <select @bind="chartType">
            <option value="bar">Barra</option>
            <option value="line">Linha</option>
        </select>
    </label>
    <button @onclick="GerarGraficoPorUsuarios">
        <img src="img/lupa.png" alt="Buscar" class="btn-icon" />
    </button>
</div>

<div class="grafico-container">
    <canvas id="processChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="js/numberProcessByUsers.js"></script>

@code {
    private DateTime startDate = DateTime.Today.AddDays(-7);
    private DateTime endDate = DateTime.Today;
    private string chartType = "bar";

    private class UsuarioChartDto
    {
        public string UserName { get; set; } = string.Empty;
        public int Quantity { get; set; }
    }

    private async Task GerarGraficoPorUsuarios()
    {
        var request = new
        {
            startDate = startDate.ToUniversalTime(),
            endDate = endDate.ToUniversalTime()
        };

        var response = await Http.PostAsJsonAsync("api/Process/chart/by-user-and-date", request);

        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<List<UsuarioChartDto>>();

            if (data != null)
            {
                var labels = data.Select(d => d.UserName).ToList();
                var values = data.Select(d => d.Quantity).ToList();
                await JS.InvokeVoidAsync("renderizarGraficoUsuarios", labels, values, chartType);
            }
        }
    }
}
