@inject IJSRuntime JS
<link rel="stylesheet" href="css/TimeOccurrenceByUsers.css" />

<div class="filtro-container">
    <label>De:
        <input @bind="startDate" type="date" />
    </label>
    <label>Até:
        <input @bind="endDate" type="date" />
    </label>
    <label>Tipo de Gráfico:
        <select @bind="chartType">
            <option value="bar">Barra</option>
            <option value="line">Linha</option>
        </select>
    </label>
    <button @onclick="GerarGraficoTempoDeOcorrenciasPorUsuarios">
        <img src="img/lupa.png" alt="Buscar" class="btn-icon" />
    </button>
</div>

<div class="grafico-container">
    <canvas id="timeOccurrenceChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="js/timeOccurrenceByUsers.js"></script>

@code {
    private DateTime startDate = DateTime.Today.AddDays(-7);
    private DateTime endDate = DateTime.Today;
    private string chartType = "bar";

    private async Task GerarGraficoTempoDeOcorrenciasPorUsuarios()
    {
        var dados = GerarDadosFicticios(startDate, endDate);
        await JS.InvokeVoidAsync("renderizarGraficoTempoOcorrenciasUsuarios", dados.Labels, dados.Values, chartType);
    }

    private (List<string> Labels, List<int> Values) GerarDadosFicticios(DateTime start, DateTime end)
    {
        var usuarios = new[] { "Cicero", "Douglas", "Franke", "Jhony", "Luiz", "Raphael" };
        var labels = new List<string>();
        var values = new List<int>();

        foreach (var user in usuarios)
        {
            labels.Add(user);
            values.Add(Random.Shared.Next(5, 180)); // minutos entre 5 e 180
        }

        return (labels, values);
    }
}
