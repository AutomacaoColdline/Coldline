@page "/reports/time-process-by-type"
@inject IJSRuntime JS
@inject HttpClient Http

<link rel="stylesheet" href="css/TimeProcessByTypeProcess.css" />

<div class="filtro-container">
    <label>De:
        <input @bind="startDate" type="date" />
    </label>
    <label>Até:
        <input @bind="endDate" type="date" />
    </label>
    <label>Tipo de Gráfico:
        <select @bind="chartType">
            <option value="bar">Barra</option>
            <option value="line">Linha</option>
        </select>
    </label>
    <button @onclick="GerarGraficoTempoPorTipoDeProcesso">
        <img src="img/lupa.png" alt="Buscar" class="btn-icon" />
    </button>
</div>

<div class="grafico-container">
    <canvas id="processTypeChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="js/timeProcessByTypeProcess.js"></script>

@code {
    private DateTime startDate = DateTime.Today.AddDays(-7);
    private DateTime endDate = DateTime.Today;
    private string chartType = "bar";

    public class ProcessTypeTimeDto
    {
        public string ProcessTypeId { get; set; } = string.Empty;
        public string ProcessTypeName { get; set; } = string.Empty;
        public string TotalProcessTime { get; set; } = "00:00:00";
        public int ProcessCount { get; set; }
    }

    private async Task GerarGraficoTempoPorTipoDeProcesso()
    {
        var requestData = new
        {
            startDate = startDate.ToUniversalTime(),
            endDate = endDate.ToUniversalTime()
        };

        var response = await Http.PostAsJsonAsync("api/Process/chart/total-time-by-type", requestData);
        if (!response.IsSuccessStatusCode)
            return;

        var result = await response.Content.ReadFromJsonAsync<List<ProcessTypeTimeDto>>();
        if (result == null)
            return;

        var labels = result.Select(x => x.ProcessTypeName).ToList();

        var values = result.Select(x =>
        {
            try
            {
                var parts = x.TotalProcessTime.Split(':');
                if (parts.Length == 3)
                {
                    int h = int.Parse(parts[0]);
                    int m = int.Parse(parts[1]);
                    int s = int.Parse(parts[2]);
                    return Math.Round((h * 60.0) + m + (s / 60.0), 2);
                }
            }
            catch { }
            return 0.0;
        }).ToList();

        await JS.InvokeVoidAsync("renderizarGraficoTipoProcesso", labels, values, chartType);
    }
}
