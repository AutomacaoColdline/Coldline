@inject IJSRuntime JS
@inject HttpClient Http

<link rel="stylesheet" href="css/TimeProcessByUsers.css" />

<div class="filtro-container">
    <label>De:
        <input @bind="startDate" type="date" />
    </label>
    <label>Até:
        <input @bind="endDate" type="date" />
    </label>
    <label>Tipo de Gráfico:
        <select @bind="chartType">
            <option value="bar">Barra</option>
            <option value="line">Linha</option>
        </select>
    </label>
    <button @onclick="GerarGraficoTempoPorUsuarios">
        <img src="img/lupa.png" alt="Buscar" class="btn-icon" />
    </button>
</div>

<div class="grafico-container">
    <canvas id="timeChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="js/timeProcessByUsers.js"></script>

@code {
    private DateTime startDate = DateTime.Today.AddDays(-7);
    private DateTime endDate = DateTime.Today;
    private string chartType = "bar";

    public class UserProcessTimeDto
    {
        public string UserId { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string TotalProcessTime { get; set; } = "00:00:00";
        public int ProcessCount { get; set; }
    }

    private async Task GerarGraficoTempoPorUsuarios()
    {
        var requestData = new
        {
            startDate = startDate.ToUniversalTime(),
            endDate = endDate.ToUniversalTime()
        };

        var response = await Http.PostAsJsonAsync("api/Process/chart/total-time-by-user", requestData);
        if (!response.IsSuccessStatusCode)
            return;

        var result = await response.Content.ReadFromJsonAsync<List<UserProcessTimeDto>>();
        if (result == null)
            return;

        var labels = result.Select(x => x.UserName).ToList();
        var rawTimes = result.Select(x => x.TotalProcessTime).ToList();

        var numericValues = rawTimes.Select(hms =>
        {
            var parts = hms.Split(':');
            if (parts.Length == 3 &&
                int.TryParse(parts[0], out int h) &&
                int.TryParse(parts[1], out int m) &&
                int.TryParse(parts[2], out int s))
            {
                return h * 60 + m + s / 60.0;
            }
            return 0.0;
        }).ToList();

        await JS.InvokeVoidAsync("renderizarGraficoTempoUsuarios", labels, numericValues, chartType, rawTimes);
    }
}
