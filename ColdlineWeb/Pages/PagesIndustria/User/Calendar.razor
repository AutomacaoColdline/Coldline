@using ColdlineWeb.Models
@using ColdlineWeb.Models.Filter
@using ColdlineWeb.Services
@inject ProcessService ProcessService

<link rel="stylesheet" href="css/Calendar.css" />

@if (ShowModal && !string.IsNullOrWhiteSpace(UserId))
{
    <div class="modal d-block">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Calendário de @User?.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseModalInternal"></button>
                </div>
                <div class="modal-body">
                    @if (IsLoading)
                    {
                        <div class="loading-container">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                            <p class="loading-text">Carregando dados do calendário...</p>
                        </div>
                    }
                    else
                    {
                        <div class="calendar">
                            <div class="calendar-header">
                                <button class="btn btn-secondary" @onclick="PreviousMonth" disabled="@IsFirstMonth">←</button>
                                <span>@currentMonth.ToString("MMMM yyyy")</span>
                                <button class="btn btn-secondary" @onclick="NextMonth" disabled="@IsCurrentMonth">→</button>
                            </div>

                            <div class="calendar-grid">
                                <div class="calendar-day-header">Domingo</div>
                                <div class="calendar-day-header">Segunda</div>
                                <div class="calendar-day-header">Terça</div>
                                <div class="calendar-day-header">Quarta</div>
                                <div class="calendar-day-header">Quinta</div>
                                <div class="calendar-day-header">Sexta</div>
                                <div class="calendar-day-header">Sábado</div>

                                @foreach (var day in DaysInCalendar)
                                {
                                    <div class="calendar-cell" @key="day">
                                        <span class="day-number">@day.Day</span>

                                        @if (ProcessData.ContainsKey(day))
                                        {
                                            <div class="process-info">
                                                <div class="process-count">
                                                    <strong>@ProcessData[day].Count</strong> processo(s)
                                                </div>
                                                <div class="process-time">
                                                    <small>@ProcessData[day].TotalTime</small>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModalInternal">Fechar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public UserModel? User { get; set; }
    [Parameter] public string? UserId { get; set; }
    [Parameter] public string? DepartmentId { get; set; }
    [Parameter] public EventCallback CloseModal { get; set; }

    private DateTime currentMonth = DateTime.Now;
    private List<DateTime> DaysInCalendar = new List<DateTime>();
    private Dictionary<DateTime, (int Count, string TotalTime)> ProcessData = new Dictionary<DateTime, (int Count, string TotalTime)>();
    private bool IsLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        if (!ShowModal)
        {
            return;
        }

        // Garante que UserId tenha valor
        UserId = string.IsNullOrWhiteSpace(UserId) ? User?.Id : UserId;

        // Somente chama BuildCalendar se UserId tiver valor válido
        if (!string.IsNullOrWhiteSpace(UserId))
        {
            await BuildCalendar();
        }
        else
        {
            // Limpa o calendário se não houver UserId
            DaysInCalendar.Clear();
            ProcessData.Clear();
        }
    }

    private bool IsCurrentMonth =>
        currentMonth.Year == DateTime.Now.Year && currentMonth.Month == DateTime.Now.Month;

    private bool IsFirstMonth =>
        currentMonth <= new DateTime(2000, 1, 1);

    private async Task PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        if (!string.IsNullOrWhiteSpace(UserId))
        {
            await BuildCalendar();
        }
    }

    private async Task NextMonth()
    {
        if (!IsCurrentMonth)
        {
            currentMonth = currentMonth.AddMonths(1);
            if (!string.IsNullOrWhiteSpace(UserId))
            {
                await BuildCalendar();
            }
        }
    }

    private async Task BuildCalendar()
    {
        // Segurança extra: não faz nada se UserId estiver vazio
        if (string.IsNullOrWhiteSpace(UserId))
        {
            DaysInCalendar.Clear();
            ProcessData.Clear();
            return;
        }

        // Mostra loading
        IsLoading = true;
        StateHasChanged(); // Força atualização da UI

        try
        {
            // Cria os dias do mês atual
            DaysInCalendar = Enumerable.Range(1, DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month))
                                       .Select(day => new DateTime(currentMonth.Year, currentMonth.Month, day))
                                       .ToList();

            ProcessData.Clear();

            // Carrega os dados de cada dia
            foreach (var day in DaysInCalendar)
            {
                var (count, totalTime) = await GetProcessInfo(UserId!, DepartmentId, day);
                if (count > 0)
                {
                    ProcessData[day] = (count, totalTime);
                }
            }
        }
        finally
        {
            // Esconde loading
            IsLoading = false;
            StateHasChanged(); // Força atualização da UI
        }
    }

    private async Task<(int Count, string TotalTime)> GetProcessInfo(string userId, string? departmentId, DateTime day)
    {
        // Segurança absoluta: nunca chamar se userId for vazio
        if (string.IsNullOrWhiteSpace(userId))
        {
            return (0, "00:00:00");
        }

        Console.WriteLine($"[Calendar] Chamando ProcessService para UserId: {userId}, Data: {day:yyyy-MM-dd}");

        var filter = new ProcessFilterModel
        {
            UserId = userId,
            DepartmentId = departmentId,
            StartDate = day.Date,
            EndDate = day.Date,
            Page = 1,
            PageSize = 100,
            Finished = null
        };

        var result = await ProcessService.SearchProcessesAsync(filter);

        if (result?.Items == null || result.Items.Count == 0)
        {
            return (0, "00:00:00");
        }

        int count = result.Items.Count;

        TimeSpan totalTimeSpan = TimeSpan.Zero;
        foreach (var process in result.Items)
        {
            if (TimeSpan.TryParse(process.ProcessTime, out TimeSpan duration))
            {
                totalTimeSpan = totalTimeSpan.Add(duration);
            }
        }

        string totalTimeFormatted = $"{(int)totalTimeSpan.TotalHours:D2}:{totalTimeSpan.Minutes:D2}:{totalTimeSpan.Seconds:D2}";

        return (count, totalTimeFormatted);
    }

    private async Task CloseModalInternal()
    {
        await CloseModal.InvokeAsync();
    }
}