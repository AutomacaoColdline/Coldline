@page "/processViewer/{Id}"
@using ColdlineWeb.Models
@using ColdlineWeb.Services
@inject ProcessService ProcessService
@inject OccurrenceService OccurrenceService
@inject MachineService MachineService
@inject NavigationManager Navigation

<link rel="stylesheet" href="css/ProcessViewer.css" />

@if (isLoading)
{
    <div class="loader-wrapper">
        <div class="custom-loader"></div>
        <span class="loading-text">Carregando...</span>
    </div>
}
else if (process == null)
{
    <div class="alert alert-danger">Processo n√£o encontrado.</div>
}
else
{
    <div class="viewer-container">
        <div class="process-box">
            <h3>üõ†Ô∏è Detalhes do Processo</h3>
            <div><strong>N¬∫ Identifica√ß√£o:</strong> @process.IdentificationNumber</div>
            <div><strong>In√≠cio:</strong> @process.StartDate.ToString("dd/MM/yyyy HH:mm")</div>
            <div><strong>T√©rmino:</strong> @(process.EndDate?.ToString("dd/MM/yyyy HH:mm") ?? "N√£o finalizado")</div>
            <div><strong>Tempo Total:</strong> @process.ProcessTime</div>
            <div><strong>Usu√°rio:</strong> @process.User.Name</div>
            <div><strong>Departamento:</strong> @process.Department.Name</div>
            <div><strong>Tipo de Processo:</strong> @process.ProcessType.Name</div>
            <div><strong>Re-trabalho:</strong> @(process.ReWork ? "Sim" : "N√£o")</div>
            <div><strong>Pr√©-Industrializa√ß√£o:</strong> @(process.PreIndustrialization == true ? "Sim" : process.PreIndustrialization == false ? "N√£o" : "N√£o informado")</div>
            <div><strong>Pr√≥totipo:</strong> @(process.Prototype == true ? "Sim" : process.Prototype == false ? "N√£o" : "N√£o informado")</div>
        </div>

        <div class="machine-box">
            <h3>üîß M√°quina</h3>
            @if (machine != null)
            {
                <div><strong>Identifica√ß√£o:</strong> @machine.IdentificationNumber</div>
                <div><strong>Nome do Cliente:</strong> @machine.CustomerName</div>
                <div><strong>Tipo:</strong> @machine.MachineType.Name</div>
                <div><strong>Fase:</strong> @machine.Phase</div>
                <div><strong>Voltagem:</strong> @machine.Voltage</div>
                <div><strong>Status:</strong> @machine.Status?.ToString()</div>
                <div><strong>Tempo:</strong> @machine.Time</div>
                <div><strong>Qualidade:</strong> @(machine.Quality?.Name ?? "Nenhum")</div>
                <div><strong>Monitoramento:</strong> @(machine.Monitoring?.Name ?? "Nenhum")</div>
            }
            else
            {
                <div class="no-info">Nenhuma m√°quina vinculada ao processo.</div>
            }
        </div>

        <div class="occurrence-box">
            <h3>üìã Ocorr√™ncias</h3>
            @if (occurrences != null && occurrences.Count > 0)
            {
                @foreach (var occ in occurrences)
                {
                    <div class="occurrence-card">
                        <div><strong>C√≥digo:</strong> @occ.CodeOccurrence</div>
                        <div><strong>Usu√°rio:</strong> @occ.User.Name</div>
                        <div><strong>Tempo:</strong> @occ.ProcessTime</div>
                        <div><strong>In√≠cio:</strong> @occ.StartDate.ToString("dd/MM/yyyy HH:mm")</div>
                        <div><strong>T√©rmino:</strong> @(occ.EndDate?.ToString("dd/MM/yyyy HH:mm") ?? "N√£o finalizado")</div>
                    </div>
                }
            }
            else
            {
                <div class="no-info">Nenhuma ocorr√™ncia registrada.</div>
            }
        </div>

        <button class="btn-back" @onclick="GoBack">‚Üê Voltar</button>
    </div>
}

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private ProcessModel? process;
    private MachineModel? machine;
    private List<OccurrenceModel> occurrences = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            process = await ProcessService.GetProcessByIdAsync(Id);

            if (process != null)
            {
                if (!string.IsNullOrEmpty(process.Machine?.Id))
                {
                    machine = await MachineService.GetMachineByIdAsync(process.Machine.Id);
                }

                if (process.Occurrences != null && process.Occurrences.Any())
                {
                    foreach (var refOcc in process.Occurrences)
                    {
                        var occurrence = await OccurrenceService.GetByIdAsync(refOcc.Id);
                        if (occurrence != null)
                            occurrences.Add(occurrence);
                    }
                }
            }
        }
        catch
        {
            process = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    void GoBack() => Navigation.NavigateTo("/home");
}
