@page "/users"
@using ColdlineWeb.Models
@using ColdlineWeb.Services
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Gerenciamento de Usuários</h3>

@if (isLoading)
{
    <p>Carregando...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="OpenAddUserModal">Adicionar Usuário</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Foto</th>
                <th>Nome</th>
                <th>Email</th>
                <th>Tipo de Usuário</th>
                <th>Departamento</th>
                <th>Número de Identificação</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(user.UrlPhoto))
                            {
                                <img src="@($"http://10.0.0.44:5000/uploads/{user.UrlPhoto}")" alt="Foto do Usuário" width="50" />
                            }

                    </td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@(user.UserType?.Name ?? "Sem Tipo")</td>
                    <td>@(user.Department?.Name ?? "Sem Departamento")</td>
                    <td>@user.IdentificationNumber</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => OpenEditUserModal(user)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Usuário" : "Adicionar Usuário")</h5>
                    <button class="close" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    <label>Nome:</label>
                    <input class="form-control" @bind="currentUser.Name" />

                    <label>Email:</label>
                    <input class="form-control" @bind="currentUser.Email" />

                    <label>Identificação:</label>
                    <input class="form-control" @bind="currentUser.IdentificationNumber" />

                    <label>Tipo de Usuário:</label>
                    <select class="form-control" @bind="currentUser.UserType.Id">
                        <option value="">Selecione...</option>
                        @foreach (var userType in userTypes)
                        {
                            <option value="@userType.Id">@userType.Name</option>
                        }
                    </select>

                    <label>Departamento:</label>
                    <select class="form-control" @bind="currentUser.Department.Id">
                        <option value="">Selecione...</option>
                        @foreach (var department in departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </select>

                    <label>Foto do Usuário:</label>
                    <InputFile OnChange="UploadImage" class="form-control" />
                    
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-success" @onclick="SaveUser">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UserModel> users = new();
    private List<ReferenceEntity> userTypes = new();
    private List<ReferenceEntity> departments = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private string? errorMessage;
    private IBrowserFile? selectedFile;
    private UserModel currentUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserModel>>("api/User") ?? new();
            userTypes = await Http.GetFromJsonAsync<List<ReferenceEntity>>("api/UserType") ?? new();
            departments = await Http.GetFromJsonAsync<List<ReferenceEntity>>("api/Department") ?? new();
        }
        catch (Exception)
        {
            errorMessage = "Erro ao carregar dados.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
        {
            errorMessage = "Nenhum arquivo foi selecionado.";
            return;
        }

        // O nome do arquivo será exatamente o nome do usuário + ".png"
        var fileName = $"{currentUser.Name}.png";

        var uploadUrl = $"http://10.0.0.44:5000/api/User/upload-image?fileName={fileName}";

        var content = new MultipartFormDataContent();
        content.Add(new StreamContent(file.OpenReadStream()), "file", fileName);

        var response = await Http.PostAsync(uploadUrl, content);
        if (response.IsSuccessStatusCode)
        {
            // Apenas salva o nome do arquivo, sem path
            currentUser.UrlPhoto = fileName;
        }
        else
        {
            errorMessage = "Erro ao enviar a imagem.";
        }
    }




    private async Task SaveUser()
    {
        // Atualiza nomes do departamento e tipo de usuário antes de enviar para a API
        currentUser.UserType.Name = userTypes.FirstOrDefault(ut => ut.Id == currentUser.UserType.Id)?.Name ?? "";
        currentUser.Department.Name = departments.FirstOrDefault(d => d.Id == currentUser.Department.Id)?.Name ?? "";

        var response = await Http.PostAsJsonAsync("api/User", currentUser);
        if (response.IsSuccessStatusCode)
        {
            showModal = false;
            await LoadData();
        }
        else
        {
            errorMessage = "Erro ao salvar usuário.";
        }
    }

    private async Task DeleteUser(string id)
    {
        await Http.DeleteAsync($"api/User/{id}");
        await LoadData();
    }

    private void OpenAddUserModal()
    {
        currentUser = new UserModel();
        showModal = true;
        isEditing = false;
    }

    private void OpenEditUserModal(UserModel user)
    {
        currentUser = user;
        showModal = true;
        isEditing = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private class UploadResponse
    {
        public string Url { get; set; } = string.Empty;
    }

    private class UserModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public ReferenceEntity UserType { get; set; } = new();
        public ReferenceEntity Department { get; set; } = new();
        public string IdentificationNumber { get; set; } = string.Empty;
        public ReferenceEntity CurrentProcess { get; set; } = new();
        public ReferenceEntity CurrentOccurrence { get; set; } = new();
        public string UrlPhoto { get; set; } = string.Empty;
    }

    private class ProcessModel
    {
        public string Id { get; set; } = string.Empty;
        public string IdentificationNumber { get; set; } = string.Empty;
    }

    private class OccurrenceModel
    {
        public string Id { get; set; } = string.Empty;
        public string CodeOccurrence { get; set; } = string.Empty;
    }

    private class ReferenceEntity
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
}
