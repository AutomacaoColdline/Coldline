@page "/users"
@inject HttpClient Http

<h3>Gerenciamento de Usu치rios</h3>

@if (isLoading)
{
    <p>Carregando...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="OpenAddUserModal">Adicionar Usu치rio</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Email</th>
                <th>Tipo de Usu치rio</th>
                <th>Departamento</th>
                <th>A칞칫es</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.UserType.Name</td>
                    <td>@user.Department.Name</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => OpenEditUserModal(user)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal d-block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Usu치rio" : "Adicionar Usu치rio")</h5>
                    <button class="close btn btn-light" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    <label>Nome:</label>
                    <input class="form-control" @bind="@currentUser.Name" />

                    <label>Email:</label>
                    <input class="form-control" @bind="@currentUser.Email" />

                    <label>Senha:</label>
                    <input type="password" class="form-control" @bind="@currentUser.Password" />

                    <label>Tipo de Usu치rio:</label>
                    <select class="form-control" @bind="@currentUser.UserType.Id">
                        @foreach (var userType in userTypes)
                        {
                            <option value="@userType.Id">@userType.Name</option>
                        }
                    </select>

                    <label>Departamento:</label>
                    <select class="form-control" @bind="@currentUser.Department.Id">
                        @foreach (var department in departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-success" @onclick="SaveUser">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UserModel> users = new();
    private List<UserTypeModel> userTypes = new();
    private List<DepartmentModel> departments = new();
    private UserModel currentUser = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserModel>>("api/User") ?? new List<UserModel>();
            userTypes = await Http.GetFromJsonAsync<List<UserTypeModel>>("api/UserType") ?? new List<UserTypeModel>();
            departments = await Http.GetFromJsonAsync<List<DepartmentModel>>("api/Department") ?? new List<DepartmentModel>();
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar dados.";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenAddUserModal()
    {
        currentUser = new UserModel
        {
            UserType = new UserTypeModel(),
            Department = new DepartmentModel()
        };
        showModal = true;
        isEditing = false;
    }

    private void OpenEditUserModal(UserModel user)
    {
        currentUser = new UserModel
        {
            Id = user.Id,
            Name = user.Name,
            Email = user.Email,
            Password = "", // N칚o expor a senha
            UserType = new UserTypeModel { Id = user.UserType.Id, Name = user.UserType.Name },
            Department = new DepartmentModel { Id = user.Department.Id, Name = user.Department.Name }
        };
        showModal = true;
        isEditing = true;
    }

    private async Task SaveUser()
    {
        try
        {
            if (isEditing)
            {
                await Http.PutAsJsonAsync($"api/User/{currentUser.Id}", currentUser);
            }
            else
            {
                await Http.PostAsJsonAsync("api/User", currentUser);
            }
            showModal = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao salvar o usu치rio.";
            Console.WriteLine(ex);
        }
    }

    private async Task DeleteUser(string id)
    {
        try
        {
            await Http.DeleteAsync($"api/User/{id}");
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao excluir o usu치rio.";
            Console.WriteLine(ex);
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    // 游댳 MODELOS LOCAIS PARA USO NO BLAZOR 游댳
    private class UserModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public UserTypeModel UserType { get; set; } = new UserTypeModel();
        public DepartmentModel Department { get; set; } = new DepartmentModel();
    }

    private class UserTypeModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }

    private class DepartmentModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
}
